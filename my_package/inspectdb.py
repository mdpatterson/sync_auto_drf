import os
import logging
import shutil
from subprocess import run, PIPE
from my_package.config import load_config
from my_package.models import generate_serializers
from my_package.views import generate_views
from my_package.urls import update_urls, update_project_urls

def run_inspectdb(project_path, database_alias):
    """Run the inspectdb command and return its output."""
    command = ["python", os.path.join(project_path, "manage.py"), "inspectdb"]
    if database_alias:
        command.extend(["--database", database_alias])
    result = run(command, stdout=PIPE, stderr=PIPE, text=True, cwd=project_path)
    if result.returncode != 0:
        raise RuntimeError(f"inspectdb failed: {result.stderr}")
    return result.stdout

def backup_models(app_path):
    """Create a backup of the existing models.py file."""
    models_file = os.path.join(app_path, "models.py")
    backup_dir = os.path.join(app_path, "models_backup")
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    backup_file = os.path.join(backup_dir, f"models_{os.path.getmtime(models_file):.0f}.py")
    shutil.copyfile(models_file, backup_file)
    logging.info(f"Backup of models.py created at {backup_file}")

def write_models(app_path, inspectdb_output):
    """Write the inspectdb output to the models.py file."""
    models_file = os.path.join(app_path, "models.py")
    inspectdb_output = inspectdb_output.replace(
        "dna_id = models.Int32Field()",
        "dna_id = models.Int32Field(primary_key=True)"
    )
    with open(models_file, "w") as f:
        f.write("# Models generated by inspectdb\n")
        f.write(inspectdb_output)

def extract_model_names(inspectdb_output):
    """Extract model names from the inspectdb output."""
    model_names = [
        line.split()[1].split("(")[0]
        for line in inspectdb_output.splitlines()
        if line.startswith("class ")
    ]
    return model_names

def validate_paths(project_path, app_path):
    """Validate that the project and app directories exist."""
    if not os.path.isdir(project_path):
        raise FileNotFoundError(f"Project directory '{project_path}' does not exist.")
    if not os.path.isdir(app_path):
        raise FileNotFoundError(f"App directory '{app_path}' does not exist.")

def generate_api_endpoints(project_path, app_path, database_alias):
    """Generate API endpoints using inspectdb output."""
    inspectdb_output = run_inspectdb(project_path, database_alias)
    backup_models(app_path)
    model_names = extract_model_names(inspectdb_output)
    write_models(app_path, inspectdb_output)
    generate_serializers(app_path, model_names)
    generate_views(app_path, model_names)
    update_urls(app_path, model_names)
    update_project_urls(project_path, os.path.basename(app_path), os.path.basename(project_path))
    logging.info("API endpoints generated successfully!")
