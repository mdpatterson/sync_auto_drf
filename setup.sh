#!/bin/bash

# Get the present working directory as base directory
BASE_DIR=$(pwd)
CONFIG_FILE="$BASE_DIR/config.json"

# Set project variables
PROJECT_NAME="myproject"
APP_NAME="myapp"
PARQUET_PATH="$BASE_DIR/my_parquet_files"
CONFIG_PATH="$BASE_DIR/my_config_files"

# Create necessary directories
mkdir -p "$BASE_DIR/$PROJECT_NAME"
mkdir -p "$PARQUET_PATH"
mkdir -p "$CONFIG_PATH"

# Create a virtual environment and activate it
python3 -m venv "$BASE_DIR/venv"
source "$BASE_DIR/venv/bin/activate"

# Install Django, Django REST Framework, ClickHouse driver, and django-clickhouse-backend
pip install django djangorestframework clickhouse-driver django-clickhouse-backend pandas pyarrow

# Create Django project
django-admin startproject "$PROJECT_NAME" "$BASE_DIR/$PROJECT_NAME"

# Navigate to the project directory
cd "$BASE_DIR/$PROJECT_NAME"


# Create dbrouters.py with the ClickHouseRouter class
DBROUTERS_PATH="$BASE_DIR/$PROJECT_NAME/dbrouters.py"
echo "Creating $DBROUTERS_PATH..."

cat <<EOL > "$DBROUTERS_PATH"
class ClickHouseRouter:
    """
    A router to control all database operations on models for the ClickHouse database.
    """

    def db_for_read(self, model, **hints):
        """
        Attempts to read ClickHouse models go to ClickHouse.
        """
        if model._meta.app_label == '$APP_NAME':
            return 'clickhouse'
        return None

    def db_for_write(self, model, **hints):
        """
        Attempts to write ClickHouse models go to ClickHouse.
        """
        if model._meta.app_label == '$APP_NAME':
            return 'clickhouse'
        return None

    def allow_relation(self, obj1, obj2, **hints):
        """
        Allow relations if a model in the ClickHouse database is involved.
        """
        if obj1._meta.app_label == '$APP_NAME' or obj2._meta.app_label == '$APP_NAME':
            return True
        return None

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        """
        Make sure the ClickHouse app only appears in the 'clickhouse' database.
        """
        if app_label == '$APP_NAME':
            return db == 'clickhouse'
        return None
EOL


# Create Django app
python manage.py startapp "$APP_NAME"

# Create settings.py with the provided template content
SETTINGS_PATH="$BASE_DIR/$PROJECT_NAME/$PROJECT_NAME/settings.py"
echo "Creating $SETTINGS_PATH..."

cat <<EOL > "$SETTINGS_PATH"
"""
Django settings for $PROJECT_NAME project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^x0ihrz3$tk%qu3*42fqv_$q)a#@r&sk$$=pmf&#)@!h(+am7a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'rest_framework',
    '$APP_NAME',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "clickhouse_backend",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '$PROJECT_NAME.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '$PROJECT_NAME.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    "clickhouse": {
        "ENGINE": "clickhouse_backend.backend",
        'NAME': 'default',
        'USER': 'default',
        'PASSWORD': '',
        'HOST': 'localhost',
    }
}
DATABASE_ROUTERS = ["dbrouters.ClickHouseRouter"]

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EOL

# Write config.json with paths and variables
cat <<EOL > "$CONFIG_FILE"
{
    "base_dir": "$BASE_DIR",
    "project_name": "$PROJECT_NAME",
    "app_name": "$APP_NAME",
    "parquet_path": "$PARQUET_PATH",
    "config_path": "$CONFIG_PATH",
    "database_alias": "clickhouse"
}
EOL

echo "Configuration file created at $CONFIG_FILE"
python manage.py makemigrations
python manage.py migrate
# Navigate back to the base directory for clarity
cd "$BASE_DIR"


echo "Setup complete. To start the development server:"
echo "1. Activate the virtual environment: source venv/bin/activate"
echo "2. add parquet files to my_parquet_files/"
echo "3. python -m my_package.main"
echo "4. Navigate to the project directory: cd $BASE_DIR/$PROJECT_NAME"
echo "5. Run the server: python manage.py runserver"


